{{- define "mychart.volumeMounts" -}}
# The last 
- mountPath: {{ coalesce .Values.volumes.hostPath.path .Values.volumes.nfs.path (printf "/%s" .Values.volumes.persistentVolumeClaim.subPath) }}
  name: workspace
  {{- if .Values.volumes.persistentVolumeClaim.claimName }}
  subPath: {{ .Values.volumes.persistentVolumeClaim.subPath }}
  {{- end }}
- mountPath: /dev/shm
  name: dshm
{{- end -}}

{{- define "mychart.volumes" -}}
- name: workspace
  {{- if .Values.volumes.nfs.server }}
  nfs:
    server: {{ .Values.volumes.nfs.server }}
    path: {{ .Values.volumes.nfs.path }}
  {{- else if .Values.volumes.hostPath.path }}
  hostPath:
    path: {{ .Values.volumes.hostPath.path }}
    type: {{ .Values.volumes.hostPath.type }}
  {{- else if .Values.volumes.persistentVolumeClaim.claimName }}
  persistentVolumeClaim:
    claimName: {{ .Values.volumes.persistentVolumeClaim.claimName }}
  {{- else }}
  {{ fail "Must specify nfs/hostPath/pvc" }}
  {{ end }}

- name: dshm
  emptyDir:
    medium: Memory
    sizeLimit: {{ .Values.trainingConfig.shmSize }}
{{- end -}}

{{ $config := .Values.trainingConfig }}

{{- if .Values.datasetConfig.prepare_task_name }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-install-download-{{ .Values.datasetConfig.prepare_task_name }}-{{ .Release.Name }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      containers:
      - name: download
        imagePullPolicy: Always
        image: {{ .Values.image.trainingImage }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            cd /opt/NeMo-Framework-Launcher;
            python -c '
            {{- if or (eq .Values.datasetConfig.prepare_task_name "squad") (eq .Values.datasetConfig.prepare_task_name "xquad") }}
            from nemo_launcher.utils.data_utils.prepare_squad import *
            prepare_squad_for_fine_tuning(data_dir="{{ .Values.datasetConfig.task_data_dir }}")
            {{- else }}
            {{- fail (printf "Expected datasetConfig.prepare_task_name to be squad or xquad, but got type=%s" .Values.datasetConfig.prepare_task_name) }}
            {{- end }}
            '
        volumeMounts:
          {{- include "mychart.volumeMounts" . | nindent 10 }}
      volumes:
        {{- include "mychart.volumes" . | nindent 8 }}
{{- end }}
---
apiVersion: kubeflow.org/v1
kind: PyTorchJob
metadata:
  name: {{ .Release.Name }}
  labels:
    app: nlp-peft
spec:
  pytorchReplicaSpecs:
    Worker:
      replicas: {{ .Values.image.nodes }}
      template:
        spec:
          containers:
          - name: pytorch
            image: {{ .Values.image.trainingImage }}
            env:
              {{- range $key, $value := $config.envVars }}
              - name: {{ $key }}
                value: {{ $value | quote }}
              {{- end}}
            command: ["/bin/bash", "-c"]
            args:
              - 'cd /opt/NeMo;
              git rev-parse HEAD;
              nvidia-smi;
              export PYTHONPATH=/opt/NeMo:${PYTHONPATH};
              {{ if ne $config.wandbKey "nil" }}
              wandb login {{ $config.wandbKey }} &&
              {{ end }}
              torchrun --nnodes={{ .Values.image.nodes }} --rdzv-backend=c10d --rdzv-endpoint={{ .Release.Name }}-worker-0 --nproc_per_node={{ .Values.image.gpuNum }} {{ $config.scriptPath }} --config-path=/config --config-name=config.yaml
              '
            imagePullPolicy: Always
            resources:
              requests:
                nvidia.com/gpu: {{ .Values.image.gpuNum }}
              limits:
                nvidia.com/gpu: {{ .Values.image.gpuNum }}
            volumeMounts:
              - mountPath: /config
                name: peft-config
              {{- include "mychart.volumeMounts" . | nindent 14 }}
          restartPolicy: Never
          imagePullSecrets:
          - name: {{ .Values.image.pullSecret }}

          volumes:
            - configMap:
                name: {{ .Release.Name }}-peft-config
              name: peft-config
            {{- include "mychart.volumes" . | nindent 12 }}

          {{ if ne $config.dnsPolicy "nil" }}
          dnsPolicy: {{ $config.dnsPolicy }}
          {{ end }}
