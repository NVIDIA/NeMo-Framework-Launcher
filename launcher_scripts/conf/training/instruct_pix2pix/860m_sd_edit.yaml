run:
  name: instruct_pix2pix_860m_sd_edit
  results_dir: ${base_results_dir}/${.name}
  time_limit: "8-00:00:00"
  dependency: "singleton"

name: nemo_instruct_pix2pix

trainer:
  devices: 8
  num_nodes: 2
  accelerator: gpu
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: -1 # PTL default. In practice, max_steps will be reached first.
  max_steps: 10000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 1
  val_check_interval: 1.0
  limit_val_batches: 50
  limit_test_batches: 50
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  benchmark: False
  enable_model_summary: True

exp_manager:
  explicit_log_dir: ${training.run.results_dir}/results
  exp_dir: null
  name: nemo_instruct_pix2pix
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_instruct_pix2pix
    name: ${training.run.name}
  create_checkpoint_callback: True
  create_tensorboard_logger: True
  checkpoint_callback_params:
    save_top_k: 3
    mode: min
    monitor: val/loss
    filename: 'instruct-pix2pix--{val/loss:.4f}-{step}-{consumed_samples}'
    always_save_nemo: False # saves nemo file during validation
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  ema:
    enable: True
    decay: 0.999
    validate_original_weights: False
    every_n_steps: 1
    cpu_offload: False

model:
  ckpt_path: null # load checkpoint weights from previous stages for fine-tuning
  precision: ${training.trainer.precision}
  micro_batch_size: 64
  global_batch_size: 1024 # `= micro_batch_size * total_devices` fake global batch size for sampler

  linear_start: 0.00085
  linear_end: 0.012
  num_timesteps_cond: 1
  log_every_t: 200
  timesteps: 1000
  first_stage_key: edited
  cond_stage_key: edit # txt for cifar, caption for pbss
  image_size: 32
  channels: 4
  cond_stage_trainable: false
  conditioning_key: hybrid
  scale_factor: 0.18215
  scale_by_std: False

  ignore_keys: []
  parameterization: eps
  clip_denoised: True
  load_only_unet: False
  cosine_s: 8e-3
  given_betas:
  original_elbo_weight: 0
  v_posterior: 0
  l_simple_weight: 1
  use_positional_encodings: False
  learn_logvar: False
  logvar_init: 0
  beta_schedule: linear
  loss_type: l2
  concat_mode: True
  cond_stage_forward:
  text_embedding_dropout_rate: 0
  fused_opt: True
  inductor: False
  inductor_cudagraphs: False

  unet_config:
    _target_: nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.UNetModel
    from_pretrained:
    image_size: 32 # unused
    in_channels: 8
    out_channels: 4
    model_channels: 320
    attention_resolutions:
    - 4
    - 2
    - 1
    num_res_blocks: 2
    channel_mult:
    - 1
    - 2
    - 4
    - 4
    num_heads: 8
    use_spatial_transformer: true
    transformer_depth: 1
    context_dim: 768
    use_checkpoint: False
    legacy: False
    use_flash_attention: False

  first_stage_config:
    _target_: nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder.AutoencoderKL
    from_pretrained:
    embed_dim: 4
    monitor: val/rec_loss
    ddconfig:
      double_z: true
      z_channels: 4
      resolution: 256
      in_channels: 3
      out_ch: 3
      ch: 128
      ch_mult:
      - 1
      - 2
      - 4
      - 4
      num_res_blocks: 2
      attn_resolutions: []
      dropout: 0.0
    lossconfig:
      target: torch.nn.Identity

  cond_stage_config:
    _target_: nemo.collections.multimodal.modules.stable_diffusion.encoders.modules.FrozenCLIPEmbedder
    version: openai/clip-vit-large-patch14
    device: cuda
    max_length: 77

  # miscellaneous
  seed: 1234
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this
  gradient_as_bucket_view: True # PyTorch DDP argument. Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)

  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.
    betas:
      - 0.9
      - 0.999
    sched:
      name: WarmupHoldPolicy
      warmup_steps: 100
      hold_steps: 10000000000000 # Incredibly large value to hold the lr as constant

  data:
    # Path to instruct-pix2pix dataset must be specified by the user.
    # https://github.com/timothybrooks/instruct-pix2pix#generated-dataset
    # (train, val, test) splits ratio = (0.95, 0.04, 0.01)
    data_path: ${data_dir}/instruct_pix2pix/clip-filtered-dataset
    num_workers: 2
    dataloader_type: cyclic # cyclic
    validation_drop_last: True # Set to false if the last partial validation samples is to be consumed
