run:
  name: nsfw_L_14
  results_dir: ${base_results_dir}/${.name}
  time_limit: "00:30:00"
  dependency: "singleton"

name: nemo_nsfw

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: 5 # PTL default. In practice, max_steps will be reached first.
  log_every_n_steps: 10
  check_val_every_n_epoch: 1
  accumulate_grad_batches: 1 # do not modify, grad acc is automatic for training megatron models
  gradient_clip_val: 1.0
  benchmark: False
  enable_model_summary: False # default PTL callback for this does not support model parallelism, instead we log manually

exp_manager:
  explicit_log_dir: ${fine_tuning.run.results_dir}/results
  exp_dir: null
  name: nemo_nsfw
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_nsfw
    name: ${fine_tuning.run.name}
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 5
    mode: min
    always_save_nemo: False # saves nemo file during validation
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'nemo_nsfw--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${fine_tuning.model.tensor_model_parallel_size}, ${fine_tuning.model.pipeline_model_parallel_size}}
  ema:
    enable: False
    decay: 0.9999
    validate_original_weights: False
    every_n_steps: 1
    cpu_offload: False

model:
  save_path: ${fine_tuning.run.results_dir}/${fine_tuning.run.name}.nemo
  precision: ${fine_tuning.trainer.precision}
  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size
  micro_batch_size: 128 # limited by GPU memory
  global_batch_size: 1024 # will use more micro batches to reach global batch size
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  virtual_pipeline_model_parallel_size: null # interleaved pipeline

  restore_from_path: /path/to/clip_L_14.nemo # used in fine-tuning
  # multimodal configs
  output_dim: 768
  #  As the number of devices used to train increases, so does the space complexity of
  #  the logit matrix. Using a naïve all-gather scheme, space complexity will be
  #  `O(n^2)`. Instead, complexity may become effectively linear if the flags
  #  `--gather-with-grad` and `--local-loss` are used. This alteration results in one-to-one
  #  numerical results as the naïve method.
  local_loss: True # calculate loss w/ local features @ global (instead of realizing full global @ global matrix)
  gather_with_grad: True # enable full distributed gradient for feature gather, set this to False may cause convergence issue

  vision:
    precision: ${fine_tuning.trainer.precision}
    # vision configs
    patch_dim: 14
    img_h: 224
    img_w: 224
    image_mean: null
    image_std: null
    num_channels: 3
    drop_patch_rate: 0.0
    drop_path_rate: 0.0
    global_average_pool: false
    output_dim: ${fine_tuning.model.output_dim}
    class_token_length: 1
    preprocess_layernorm: true
    encoder_seq_length: 196
    max_position_embeddings: 196
    position_embedding_type: learned_parameters
    num_layers: 24
    hidden_size: 1024
    ffn_hidden_size: 4096
    num_attention_heads: 16
    init_method_std: 0.02
    use_scaled_init_method: true
    hidden_dropout: 0.0
    attention_dropout: 0.0
    kv_channels: null
    apply_query_key_layer_scaling: true
    normalization: layernorm
    layernorm_epsilon: 1.0e-05
    do_layer_norm_weight_decay: false
    pre_process: true
    post_process: true
    persist_layer_norm: true
    activations_checkpoint_granularity: null
    activations_checkpoint_method: null
    activations_checkpoint_num_layers: null
    sequence_parallel: false
    native_amp_init_scale: 4294967296
    native_amp_growth_interval: 1000
    hysteresis: 2
    fp32_residual_connection: false
    fp16_lm_cross_entropy: false
    masked_softmax_fusion: true
    bias_dropout_add_fusion: true
    use_cpu_initialization: false
    onnx_safe: false
    gradient_accumulation_fusion: false
    openai_gelu: false
    bias_activation_fusion: false
    megatron_legacy: true
    activation: approx-gelu

  text:
    precision: ${fine_tuning.trainer.precision}
    # text configs
    output_dim: ${fine_tuning.model.output_dim}

    encoder_seq_length: 77
    max_position_embeddings: ${.encoder_seq_length}
    position_embedding_type: learned_parameters
    num_layers: 12
    hidden_size: 768
    ffn_hidden_size: 3072
    num_attention_heads: 12
    init_method_std: 0.02
    use_scaled_init_method: true
    hidden_dropout: 0.0
    attention_dropout: 0.0
    kv_channels: null
    apply_query_key_layer_scaling: true
    normalization: layernorm
    layernorm_epsilon: 1.0e-05
    do_layer_norm_weight_decay: false
    pre_process: true
    post_process: true
    persist_layer_norm: true
    activations_checkpoint_granularity: null
    activations_checkpoint_method: null
    activations_checkpoint_num_layers: null
    num_micro_batches_with_partial_activation_checkpoints: null
    activations_checkpoint_layers_per_pipeline: null
    sequence_parallel: false
    native_amp_init_scale: 4294967296
    native_amp_growth_interval: 1000
    hysteresis: 2
    fp32_residual_connection: false
    fp16_lm_cross_entropy: false
    masked_softmax_fusion: true
    bias_dropout_add_fusion: true
    use_cpu_initialization: false
    onnx_safe: false
    gradient_accumulation_fusion: false
    openai_gelu: false
    bias_activation_fusion: false
    megatron_legacy: true
    transformer_engine: false
    fp8: false
    fp8_e4m3: false
    fp8_hybrid: false
    fp8_margin: 0
    fp8_interval: 1
    fp8_amax_history_len: 1
    fp8_amax_compute_algo: most_recent
    use_emha: false
    activation: approx-gelu

  # Megatron O2-style half-precision
  megatron_amp_O2: False # Enable O2-level automatic mixed precision using main parameters
  grad_allreduce_chunk_size_mb: 125
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce

  # miscellaneous
  seed: 1234
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this
  gradient_as_bucket_view: True # PyTorch DDP argument. Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)

  sim_hidden_dim: 64 # Size of MLP based similarity network
  cls_hidden_dim: 64 # Size of the final classifier network

  tokenizer:
    library: 'huggingface'
    type: 'openai/clip-vit-large-patch14'
    model: null
    vocab_file: null
    merge_file: null
    delimiter: null # only used for tabular tokenizer
    sentencepiece_legacy: False # Legacy=True allows you to add special tokens to sentencepiece tokenizers.
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.

  data:
    num_workers: 8
    train:
      dataset_path: # List of paths to pkl files or tar files
        - ${data_dir}/nsfw/
    validation: # List of paths to pkl files or tar files
      dataset_path:
        - ${data_dir}/nsfw/

  # Nsys profiling options
  nsys_profile:
    enabled: False
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [ 0 ] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  optim:
    name: adam
    lr: 1e-3
    weight_decay: 0.0
    sched:
      name: CosineAnnealing
      warmup_steps: 200
      constant_steps: 0
      min_lr: 1e-5
  concepts: ${data_dir}/nsfw/concepts.txt
