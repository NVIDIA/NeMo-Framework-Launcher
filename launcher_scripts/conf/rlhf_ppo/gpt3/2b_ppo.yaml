run:
  name: rlhf_2b_actor_2b_critic
  results_dir: ${base_results_dir}/${.name}
  time_limit: "4-00:00:00"
  dependency: "singleton"

name: rlhf_2b_ppo

reward_model_server:
  trainer:
    devices: 8
    num_nodes: 1
    accelerator: gpu
    logger: False # logger provided by exp_manager
    precision: bf16 # 16, 32, or bf16

  reward_standardization:  # Provide mean and std for z-score standardization of the rewards during inference.
    enable: False
    mean: 0.0
    std: 1.0

  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  pipeline_model_parallel_split_rank: 0 # used for encoder and decoder model
  inference_micro_batch_size: 4
  gpt_rm_model_file: ???  # path to trained reward model
  checkpoint_dir: null # checkpoint file dir. This is used to load the PTL checkpoint generated during the GPT training
  checkpoint_name: null # PTL checkpoint file name, only used for PTL checkpoint loading
  hparams_file: null # model configuration file, only used for PTL checkpoint loading
  server: True  # whether launch the API server
  port: 5565 # the port number for the inference server

initial_policy_server:
  trainer:
    devices: 8
    num_nodes: 1
    accelerator: gpu
    logger: False # logger provided by exp_manager
    precision: bf16 # 16, 32, or bf16

  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  pipeline_model_parallel_split_rank: 0 # used for encoder and decoder model
  inference_micro_batch_size: 2
  gpt_model_file: ${actor.model.pretrained_checkpoint.restore_from_path}
  checkpoint_dir: null # checkpoint file dir. This is used to load the PTL checkpoint generated during the GPT training
  checkpoint_name: null # PTL checkpoint file name, only used for PTL checkpoint loading
  hparams_file: null # model configuration file, only used for PTL checkpoint loading
  prompts: # prompts for GPT inference
    - "Q: How are you?"
    - "Q: How big is the universe?"
  server: True  # whether launch the inference server
  port: 5566 # the port number for the inference server

critic_server:
  inference:
    sequence_length: 4096
    micro_batch_size: 2
    server: True
    port: 5567

  trainer:
    num_nodes: 1
    devices: 8
    accelerator: gpu
    precision: bf16
    logger: False # logger provided by exp_manager
    enable_checkpointing: False
    replace_sampler_ddp: False
    max_epochs: null
    max_steps: 500000
    max_time: "02:00:00:00" # days:hours:minutes:seconds
    log_every_n_steps: 1
    val_check_interval: 50
    limit_val_batches: 1
    limit_test_batches: 0
    num_sanity_val_steps: 0
    accumulate_grad_batches: 1
    gradient_clip_val: 1.0


  exp_manager:
    explicit_log_dir: ./critic_results
    exp_dir: null
    name: megatron_gpt
    max_time_per_run: "00:03:55:00"
    create_wandb_logger: True
    wandb_logger_kwargs:
      project: nemo_rlhf_ppo
      name: gpt3_ppo_2b_critic
    resume_if_exists: True
    resume_ignore_no_checkpoint: True
    create_checkpoint_callback: True
    checkpoint_callback_params:
      monitor: step
      every_n_train_steps: 10
      every_n_epochs: null
      save_top_k: 10
      mode: max
      always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
      save_nemo_on_train_end: False # not recommended when training large models on clusters with short time limits
      filename: 'megatron_gpt--{critic_reduced_train_loss:.2f}-{step}-{consumed_samples}'
      model_parallel_size: ${multiply:${rlhf_ppo.critic_server.model.tensor_model_parallel_size}, ${rlhf_ppo.critic_server.model.pipeline_model_parallel_size}}
    log_step_timing: True
    step_timing_kwargs:
      sync_cuda: True
      buffer_size: 5

  model:
    ppo_epochs: 1
    micro_batch_size: 2
    global_batch_size: 64
    tensor_model_parallel_size: 1
    pipeline_model_parallel_size: 1
    virtual_pipeline_model_parallel_size: null # interleaved pipeline
    resume_from_checkpoint: null # manually set the checkpoint file to load from
    output_sequence: True # Whether to output a single scalar or a sequence of scalars.
    use_avg_pool: False  # Whether to use avg pool to sum across the sequence dim in reward model

    # model architecture
    encoder_seq_length: 4096
    max_position_embeddings: 4096
    num_layers: 24
    hidden_size: 2048
    ffn_hidden_size: 5440 # ${multiply:4, ${.hidden_size}}  # Transformer FFN hidden size. 4 * hidden_size.
    num_attention_heads: 16
    init_method_std: 0.014  # Standard deviation of the zero mean normal distribution used for weight initialization.')
    use_scaled_init_method: True
    hidden_dropout: 0.0  # Dropout probability for hidden state transformer.
    attention_dropout: 0.0
    ffn_dropout: 0.0
    kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
    apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
    normalization: layernorm1p
    layernorm_epsilon: 1e-5
    do_layer_norm_weight_decay: False
    make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
    pre_process: True # add embedding
    post_process: True # add pooler
    persist_layer_norm: True # Use of persistent fused layer norm kernel.
    gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
    bias: False
    activation: fast-swiglu
    headscale: False
    transformer_block_type: pre_ln
    openai_gelu: False
    normalize_attention_scores: True
    position_embedding_type: rope
    rotary_percentage: 0.5
    attention_type: multihead
    share_embeddings_and_output_weights: false

    # Fusion
    grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
    gradient_accumulation_fusion: False # Fuse weight gradient accumulation to GEMMs
    bias_activation_fusion: False # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
    bias_dropout_add_fusion: False # Use a kernel that fuses the bias addition, dropout and residual connection addition.
    masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.

    ## Activation Checkpointing
    activations_checkpoint_granularity: null # 'selective' or 'full'
    activations_checkpoint_method: null # 'uniform', 'block'
    activations_checkpoint_num_layers: null
    num_micro_batches_with_partial_activation_checkpoints: null
    activations_checkpoint_layers_per_pipeline: null

    ## Sequence Parallelism
    sequence_parallel: False

    tokenizer:
      library: 'sentencepiece'
      type: null
      model: ???  # path to the tokenizer `.model` file (may be extracted from the .nemo)
      delimiter: null
      vocab_file: null
      merge_file: null
      sentencepiece_legacy: false
      tokenizer_model: ${.model}

    reward_standardization:  # Provide mean and std for z-score standardization of the rewards during inference.
      enable: False
      mean: 0.0
      std: 1.0

    # precision
    native_amp_init_scale: 4294967296 # 2 ** 32
    native_amp_growth_interval: 1000
    hysteresis: 2 # Gradient scale hysteresis
    fp32_residual_connection: False # Move residual connections to fp32
    fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

    # Megatron O2-style half-precision
    megatron_amp_O2: True # Enable O2-level automatic mixed precision using master parameters
    grad_allreduce_chunk_size_mb: 125

    ## Transformer Engine
    transformer_engine: False
    fp8: False # enables fp8 in TransformerLayer forward
    fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
    fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
    fp8_margin: 0 # scaling margin
    fp8_interval: 1 # scaling update interval
    fp8_amax_history_len: 1 # Number of steps for which amax history is recorded per tensor
    fp8_amax_compute_algo: most_recent # 'most_recent' or 'max'. Algorithm for computing amax from history
    use_emha: False

    # miscellaneous
    seed: 1234
    sync_batch_comm: False
    use_cpu_initialization: False # Init weights on the CPU (slow for large models)
    onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
    apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

    ppo:
      critic_loss_clip_value: 0.2

    # Nsys profiling options
    nsys_profile:
      enabled: False
      trace: [nvtx,cuda]
      start_step: 10  # Global batch to start profiling
      end_step: 10 # Global batch to end profiling
      ranks: [0] # Global rank IDs to profile
      gen_shape: False # Generate model and kernel details including input shapes

    pretrained_checkpoint:
      restore_from_path: ${reward_model_server.gpt_rm_model_file}
      checkpoint_dir: null
      checkpoint_name: null

    optim:
      name: distributed_fused_adam
      bucket_cap_mb: 200
      overlap_grad_sync: False
      contiguous_grad_buffer: True
      lr: 9e-6
      weight_decay: 0.1
      betas:
      - 0.9
      - 0.98
      sched:
        name: CosineAnnealing
        warmup_steps: 10
        constant_steps: 1000
        min_lr: 9e-7

    data:
      data_impl: mmap
      splits_string: null
      seq_length: 4096
      skip_warmup: True
      num_workers: 2
      dataloader_type: single # cyclic
      reset_position_ids: False # Reset position ids after end-of-document token
      reset_attention_mask: False # Reset attention mask after end-of-document token
      eod_mask_loss: False # Mask loss for the end of document tokens
      index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
      data_prefix: null

actor:
  trainer:
    num_nodes: 8
    devices: 8
    accelerator: gpu
    precision: bf16
    logger: False # logger provided by exp_manager
    enable_checkpointing: False
    replace_sampler_ddp: False
    max_epochs: null
    max_steps: 250000
    max_time: "02:00:00:00" # days:hours:minutes:seconds
    log_every_n_steps: 1
    val_check_interval: 16
    limit_val_batches: 1
    limit_test_batches: 0
    num_sanity_val_steps: 0
    accumulate_grad_batches: 1
    gradient_clip_val: 1.0


  exp_manager:
    explicit_log_dir: ./actor_results
    exp_dir: null
    name: megatron_gpt
    max_time_per_run: "00:03:55:00"
    create_wandb_logger: True
    wandb_logger_kwargs:
      project: nemo_rlhf_ppo
      name: gpt3_ppo_2b_actor
    resume_if_exists: True
    resume_ignore_no_checkpoint: True
    create_checkpoint_callback: True
    checkpoint_callback_params:
      monitor: global_rollout_step
      save_top_k: 10
      mode: max
      always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
      save_nemo_on_train_end: False # not recommended when training large models on clusters with short time limits
      filename: 'megatron_gpt--{actor_reduced_train_loss:.3f}-{step}-{rl_train_global_step}-{global_rollout_step}-{consumed_samples}'
      model_parallel_size: ${multiply:${rlhf_ppo.actor.model.tensor_model_parallel_size}, ${rlhf_ppo.actor.model.pipeline_model_parallel_size}}
    log_step_timing: True
    step_timing_kwargs:
      sync_cuda: True
      buffer_size: 5

  model:
    micro_batch_size: 1
    global_batch_size: 64
    tensor_model_parallel_size: 1
    pipeline_model_parallel_size: 1
    virtual_pipeline_model_parallel_size: null # interleaved pipeline
    resume_from_checkpoint: null # manually set the checkpoint file to load from
    output_sequence: False  # Whether to output a single scalar or a sequence of scalars.
    use_avg_pool: False  # Whether to use avg pool to sum across the sequence dim in reward model

    # model architecture
    encoder_seq_length: 4096
    max_position_embeddings: 4096
    num_layers: 24
    hidden_size: 2048
    ffn_hidden_size: 5440 # ${multiply:4, ${.hidden_size}}  # Transformer FFN hidden size. 4 * hidden_size.
    num_attention_heads: 16
    init_method_std: 0.014  # Standard deviation of the zero mean normal distribution used for weight initialization.')
    use_scaled_init_method: True
    hidden_dropout: 0.0  # Dropout probability for hidden state transformer.
    attention_dropout: 0.0
    ffn_dropout: 0.0
    kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
    apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
    normalization: layernorm1p
    layernorm_epsilon: 1e-5
    do_layer_norm_weight_decay: False
    make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
    pre_process: True # add embedding
    post_process: True # add pooler
    persist_layer_norm: True # Use of persistent fused layer norm kernel.
    gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
    bias: False
    activation: fast-swiglu
    headscale: False
    transformer_block_type: pre_ln
    openai_gelu: False
    normalize_attention_scores: True
    position_embedding_type: rope
    rotary_percentage: 0.5
    attention_type: multihead
    share_embeddings_and_output_weights: false

    # Fusion
    grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
    gradient_accumulation_fusion: False # Fuse weight gradient accumulation to GEMMs
    bias_activation_fusion: False # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
    bias_dropout_add_fusion: False # Use a kernel that fuses the bias addition, dropout and residual connection addition.
    masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.

    ## Activation Checkpointing
    activations_checkpoint_granularity: null # 'selective' or 'full'
    activations_checkpoint_method: null # 'uniform', 'block'
    activations_checkpoint_num_layers: null
    num_micro_batches_with_partial_activation_checkpoints: null
    activations_checkpoint_layers_per_pipeline: null

    ## Sequence Parallelism
    sequence_parallel: False

    rlhf:
      reward_model:
        ip: localhost
        port: 5565
      critic:
        ip: localhost
        port: 5567
      initial_policy:
        ip: localhost
        port: 5566
      ppo:
        entropy_penalty: 0.01
        initial_policy_kl_penalty: 0.02
        use_absolute_kl: True
        epochs: 1
        num_rollout_samples: 256  # Total number of rollout samples to collect before doing training.
        rollout_micro_batch_size: 2  # number of samples per DP axis
        ratio_eps: 0.2
        discount: 1.0
        gae_lambda: 0.95
        normalize_advantage: True

    sampling_params:
      use_greedy: False
      temperature: 1.0
      top_k: 0
      top_p: 1.0
      repetition_penalty: 1.0
      add_BOS: False
      all_probs: False
      compute_logprob: False

    tokenizer:
      library: 'sentencepiece'
      type: null
      model: ${critic_server.model.tokenizer.model}
      delimiter: null
      vocab_file: null
      merge_file: null
      sentencepiece_legacy: false
      tokenizer_model: ${.model}

    # precision
    native_amp_init_scale: 4294967296 # 2 ** 32
    native_amp_growth_interval: 1000
    hysteresis: 2 # Gradient scale hysteresis
    fp32_residual_connection: False # Move residual connections to fp32
    fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

    # Megatron O2-style half-precision
    megatron_amp_O2: True # Enable O2-level automatic mixed precision using master parameters
    grad_allreduce_chunk_size_mb: 125

    ## Transformer Engine
    transformer_engine: False
    fp8: False # enables fp8 in TransformerLayer forward
    fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
    fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
    fp8_margin: 0 # scaling margin
    fp8_interval: 1 # scaling update interval
    fp8_amax_history_len: 1 # Number of steps for which amax history is recorded per tensor
    fp8_amax_compute_algo: most_recent # 'most_recent' or 'max'. Algorithm for computing amax from history
    use_emha: False

    # miscellaneous
    seed: 1234
    sync_batch_comm: False
    use_cpu_initialization: False # Init weights on the CPU (slow for large models)
    onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
    apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

    # Nsys profiling options
    nsys_profile:
      enabled: False
      trace: [nvtx,cuda]
      start_step: 10  # Global batch to start profiling
      end_step: 10 # Global batch to end profiling
      ranks: [0] # Global rank IDs to profile
      gen_shape: False # Generate model and kernel details including input shapes

    pretrained_checkpoint:
      restore_from_path: ???  # path to pre-trained model used as starting point
      checkpoint_dir: null
      checkpoint_name: null

    optim:
      name: distributed_fused_adam
      bucket_cap_mb: 200
      overlap_grad_sync: False
      contiguous_grad_buffer: True
      lr: 9e-6
      weight_decay: 0.1
      betas:
      - 0.9
      - 0.98
      sched:
        name: CosineAnnealing
        warmup_steps: 10
        constant_steps: 1000
        min_lr: 9e-7

    data:
      data_impl: mmap
      splits_string: null
      seq_length: 4096
      skip_warmup: True
      num_workers: 2
      dataloader_type: single # cyclic
      reset_position_ids: False # Reset position ids after end-of-document token
      reset_attention_mask: False # Reset attention mask after end-of-document token
      eod_mask_loss: False # Mask loss for the end of document tokens
      index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
      data_prefix: null
