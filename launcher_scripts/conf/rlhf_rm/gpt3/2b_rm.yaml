run:
  name: rlhf_rm_2b
  results_dir: ${base_results_dir}/${.name}
  time_limit: "4-00:00:00"
  dependency: "singleton"

name: rlhf_2b_rm

trainer:
  num_nodes: 8
  devices: 8
  accelerator: gpu
  precision: bf16

  # rm specific args
  rm:
    max_epochs: 1
    max_steps: -1
    val_check_interval: 100
    save_interval: 100

    # how many GBS we loop over
    # set to float for a percentage
    # of the validation dataset
    limit_val_batches: 50
    limit_test_batches: 50
    gradient_clip_val: 1.0

  # do not change these
  logger: False # logger provided by exp_manager
  log_every_n_steps: 10
  enable_checkpointing: False
  use_distributed_sampler: False
  max_time: "00:10:00:00" # days:hours:minutes:seconds
  max_epochs: ${.rm.max_epochs}
  max_steps: ${.rm.max_steps}
  accumulate_grad_batches: 1


exp_manager:
  explicit_log_dir: ./rm_results
  exp_dir: null
  name: megatron_gpt
  max_time_per_run: "00:03:45:00"
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_rlhf_launcher_runs
    name: 2b_rm
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 10
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${rlhf_rm.model.tensor_model_parallel_size}, ${rlhf_rm.model.pipeline_model_parallel_size}}
  log_step_timing: True
  step_timing_kwargs:
    sync_cuda: True
    buffer_size: 5

# Aliased since scripts expect it at the top level
pretrained_checkpoint: ${.model.pretrained_checkpoint}

model:
  micro_batch_size: 1
  global_batch_size: 64
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  virtual_pipeline_model_parallel_size: null # interleaved pipeline
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  output_sequence: False  # Whether to output a single scalar or a sequence of scalars.
  use_avg_pool: False  # Whether to use avg pool to sum across the sequence dim in reward model

  # model architecture
  encoder_seq_length: 4096
  max_position_embeddings: 4096
  num_layers: 24
  hidden_size: 2048
  ffn_hidden_size: 5440 # ${multiply:4, ${.hidden_size}}  # Transformer FFN hidden size. 4 * hidden_size.
  num_attention_heads: 16
  init_method_std: 0.014  # Standard deviation of the zero mean normal distribution used for weight initialization.')
  use_scaled_init_method: True
  hidden_dropout: 0.0  # Dropout probability for hidden state transformer.
  attention_dropout: 0.0
  ffn_dropout: 0.0
  kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  normalization: layernorm1p
  layernorm_epsilon: 1e-5
  do_layer_norm_weight_decay: False
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  bias: False
  activation: fast-swiglu
  headscale: False
  transformer_block_type: pre_ln
  openai_gelu: False
  normalize_attention_scores: True
  position_embedding_type: rope
  rotary_percentage: 0.5
  attention_type: multihead
  share_embeddings_and_output_weights: false

  # Fusion
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
  gradient_accumulation_fusion: False # Fuse weight gradient accumulation to GEMMs
  bias_activation_fusion: False # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  bias_dropout_add_fusion: False # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.

  ## Activation Checkpointing
  activations_checkpoint_granularity: selective # 'selective' or 'full'
  activations_checkpoint_method: uniform # 'uniform', 'block'
  activations_checkpoint_num_layers: null
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null

  ## Sequence Parallelism
  sequence_parallel: False

  tokenizer:
    library: 'megatron'
    type: 'GPT2BPETokenizer'
    model: null
    delimiter: null # only used for tabular tokenizer
    vocab_file: ${data_dir}/bpe/vocab.json
    merge_file: ${data_dir}/bpe/merges.txt

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  hysteresis: 2 # Gradient scale hysteresis
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # Megatron O2-style half-precision
  megatron_amp_O2: True # Enable O2-level automatic mixed precision using master parameters
  grad_allreduce_chunk_size_mb: 125

  ## Transformer Engine
  transformer_engine: False
  fp8: False # enables fp8 in TransformerLayer forward
  fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: most_recent # 'most_recent' or 'max'. Algorithm for computing amax from history
  use_emha: False

  # miscellaneous
  seed: 1234
  sync_batch_comm: False
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

  # Nsys profiling options
  nsys_profile:
    enabled: False
    trace: [nvtx,cuda]
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  pretrained_checkpoint:
    restore_from_path: null
    checkpoint_dir: null
    checkpoint_name: null

  optim:
    name: distributed_fused_adam
    bucket_cap_mb: 200
    overlap_grad_sync: False
    contiguous_grad_buffer: True
    lr: 9e-6
    weight_decay: 0.1
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 10
      constant_steps: 1000
      min_lr: 9e-7

  data:
    data_impl: jsonl
    splits_string: null
    seq_length: ${..encoder_seq_length}
    skip_warmup: True
    num_workers: 2
    dataloader_type: single # cyclic
    reset_position_ids: False # Reset position ids after end-of-document token
    reset_attention_mask: False # Reset attention mask after end-of-document token
    eod_mask_loss: False # Mask loss for the end of document tokens
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_prefix: null

  # define fields from the base model's config that should be ignored when merging with this config.
  overwrite_base_config:
      data:
        data_prefix: True
